--- 
iterations: 
  :list: 
  - !ruby/object:Iteration 
    end: Feb 23, 2008
    name: Iteration 1
    start: Feb 02, 08
    velocity: 0.909090909090909
  - !ruby/object:Iteration 
    end: ""
    name: Iteration 2
    start: ""
    velocity: 0.0
  :selected: 0
Iteration 1: 
  :list: 
  - !ruby/object:Story 
    completed: true
    description: Open a socket, and mirror the user's messages.
    estimate: 1
    title: Accept a connection
  - !ruby/object:Story 
    completed: true
    description: Mirror the users' messages to all others.
    estimate: 1
    title: Accept multiple connections
  - !ruby/object:Story 
    completed: true
    description: |-
      Remove test echoing logic.
      
      Wait USER and NICK commands to set logged in state.
    estimate: 2
    title: User login as per RFC 1549
  - !ruby/object:Story 
    completed: true
    description: "Return\n\n\
      :localhost. 431  :No nickname given\n\n\
      as per the RFC."
    estimate: 1
    title: Return error for bad NICK
  - !ruby/object:Story 
    completed: true
    description: |
      print: NOTICE AUTH :*** Looking up your hostname...
      Perform hostname lookup (with a deferred), and have callback print:
      NOTICE AUTH :*** Found your hostname

    estimate: 1
    title: Hostname Lookup and Connect status messages
  - !ruby/object:Story 
    completed: true
    description: "On successful login, print the below:\n\n\
      :localhost. 001 $user :Welcome to $hostname.\n\
      :localhost. 002 $user :Your host is $hostname running version Ikarus\n\
      NOTICE orospakr :*** Your host is  $hostname running version Ikarus\n\n\n\
      maybe this stuff later:\n\n\
      :localhost. 003 orospakr :This server was cobbled together Thu Nov  9 03:18:35 UTC 2006\n\
      :localhost. 004 orospakr localhost. dancer-ircd-1.0.36 aAbBcCdDeEfFGhHiIjkKlLmMnNopPQrRsStuUvVwWxXyYzZ0123459*@ bcdefFhiIklmnoPqstv\n\
      :localhost. 005 orospakr MODES=4 CHANLIMIT=#:20 NICKLEN=16 USERLEN=10 HOSTLEN=63 TOPICLEN=450 KICKLEN=450 CHANNELLEN=30 KEYLEN=23 CHANTYPES=# PREFIX=(ov)@+ CASEMAPPING=ascii CAPAB IRCD=dancer :are available on this servert"
    estimate: 1
    title: Login Status Messages
  - !ruby/object:Story 
    completed: true
    description: "Return\n\n\
      :localhost. 461 * USER :Not enough parameters\n\n\
      as per RFC."
    estimate: 1
    title: Return error for bad USER
  - !ruby/object:Story 
    completed: true
    description: "Interpret JOIN and PART messages (RFC 1459), associate the user to a channel.\n\n\
      When the user JOINs:\n\
      JOIN #mychannel\n\
      All users the channel receive (including the joined user herself):\n\
      :orospakr!~orospakr@localhost. JOIN :#mychannel\n\n\
      When the user PARTs:\n\
      PART #mychannel :I'm outta here!\n\
      All users in the channel receive (including the formerly joined user herself):\n\
      :orospakr!~orospakr@localhost. PART #another_channel :I'm outta here!\n\n"
    estimate: 2
    title: Join and part channels, as RFC 1549
  - !ruby/object:Story 
    completed: true
    description: "When the user QUITs:\n\
      QUIT :Bye bye!\n\n\
      All users in all the channels the user is joined to receive:\n\
      :orospakr!~orospakr@localhost. QUIT :Bye bye!\n\n\
      The user herself receives:\n\
      ERROR :Closing Link: my_second_guy (Client Quit)\n\n\
      Of course, this means that the user object is no longer included in the channel lists, nor does it receive messages to any of the formerly joined channels."
    estimate: 3
    title: Quitting by means of QUIT verb
  - !ruby/object:Story 
    completed: true
    description: "Interpret PRIVMSG, and transmit the text to the other users in the channel provided by the first argument.\n\n\
      Speaker sends:\n\n\
      PRIVMSG #mychannel :whee.\n\n\
      All other users see (but not the original sender, IRC being asynchronous and all):\n\n\
      :orospakr!~orospakr@localhost. PRIVMSG #mychannel :whee.\n\n"
    estimate: 2
    title: Channel message
  - !ruby/object:Story 
    completed: true
    description: ""
    estimate: 1
    title: -p, --port argument sets port number.
  - !ruby/object:Story 
    completed: true
    description: The irc client program actually closing the TCP or timing out the socket should have the IRC object perform the Quit operation.
    estimate: 2
    title: Quitting by means of TCP reset
  - !ruby/object:Story 
    completed: true
    description: "Implement the WHO verb, as per the RFC.\n\n\
      Asking client sends: WHO #<channel_name>\n\n\
      For each user (including the asking user) in the channel, lines are transmitted in the form below for each user:\n\
      :localhost. 352 <requesting_user> #<channel_name> <user_name> <user_hostname> <server_hostname> <user_nick> <modes> :<hopcount> Andrew Clunis\n\n\
      <modes> begins with either H or G (here or gone for away status), plus any other modes that might be set.  (r is for registered)\n\
      <hopcount> is always 0, because this system has no server linking, of course.\n\n\
      The list is the terminated by a line in the form:\n\
      :localhost. 315 <requesting_user> #<channel_name> :End of /WHO list.\n\n\
      Example:\n\
      :localhost. 352 someotherguy #mychannel ~orospakr localhost. irc.localnet someotherguy H :0 Andrew Clunis\r\n\
      :localhost. 352 someotherguy #mychannel ~orospakr localhost. irc.localnet orospakr H@ :0 Andrew Clunis\r\n\
      :localhost. 315 someotherguy #mychannel :End of /WHO list."
    estimate: 2
    title: Channel user lists
  - !ruby/object:Story 
    completed: false
    description: "Reply to PING packets with the standard reply as per the RFC.\n\n\
      Sender transmits:\n\n\
      PING localhost.\n\n\
      :localhost. PONG localhost. :someotherguy"
    estimate: 2
    title: Ping? PONG!!!11
  - !ruby/object:Story 
    completed: false
    description: |-
      TOPIC #qc :my_topic
      
      Should set the topic,
      
      whereas (method of reception?)
      
      (read RFC...?)
    estimate: 1
    title: Set and get channel topic
  - !ruby/object:Story 
    completed: false
    description: Allow users to register a permanent account by means of `/msg nickserv register`.
    estimate: 2
    title: Account registration
  - !ruby/object:Story 
    completed: false
    description: Allow user to login by means of PASS, or by means of /msg nickserv identify.
    estimate: 2
    title: Account login
  - !ruby/object:Story 
    completed: false
    description: |-
      Allow users to transmit full UTF-8 text messages.
      
      (this story shouldn't require any new code, just tests)
    estimate: 1
    title: UTF8
  - !ruby/object:Story 
    completed: false
    description: |-
      Respond to:
      
      CAPAB IDENTIFY-MSG
      
      with:
      
      ...?
      
      Also, do I really want this feature at all?  Maybe I should just return 421 and be done with it.
    estimate: 1
    title: Respond to identify-msg capability request
  - !ruby/object:Story 
    completed: false
    description: "Unknown commands should return a sentence in the form:\n\n\
      :irc.questionablecontent.net 421 orosapkr BONGHITS :Unknown command\n"
    estimate: 1
    title: Unknown commands should return err 421
  - !ruby/object:Story 
    completed: false
    description: |-
      Daemonize, unless -f or --foreground is passed.
      
      -f and --f maybe should implicitly set logging to verbose.
    estimate: 1
    title: Daemon
  :selected: 17
Iteration 2: 
  :list: 
  - !ruby/object:Story 
    completed: false
    description: |-
      Support the KLINE command as a means to place persistent server-wide bans that prevent logins based on the following filter format:
      
      <user>@<hostname>
      
      asterisks may be used as variable-length wildcards.
    estimate: 1
    title: kline
  - !ruby/object:Story 
    completed: false
    description: Mode setting a user to +o in a channel adds the user to the permanent operator list for that channel, and WHO will reply with an o bit set for that user in that channel.
    estimate: 0
    title: Operator status
  - !ruby/object:Story 
    completed: false
    description: Implement user to user CTCP messages, as per the RFC.
    estimate: 2
    title: CTCP message support
  - !ruby/object:Story 
    completed: false
    description: |-
      Any user sending too many CTCP messages will be removed.
      
      Any user receiving too many CTCP messages will cause those messages to be dropped and logged, to prevent more distributed flood attacks.
    estimate: 2
    title: CTCP flood protection
  - !ruby/object:Story 
    completed: false
    description: |-
      User with administrator bit set sends:
      
      LART <nick>
      
      Causes server to transmit about 1000 spurious JOIN messages with random channel names to the hapless client, along with 500 lines of random text in each one, and then kill the connection.
    estimate: 0
    title: LART
  :selected: 0
